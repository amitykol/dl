import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import tensorflow as tf
from tensorflow import keras

import warnings
warnings.filterwarnings('ignore')
fashion_mnist = tf.keras.datasets.fashion_mnist #inbuilt dataset
(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()
X_train.shape
X_test.shape
X_valid, X_train = X_train[:4000], X_train[4000:] / 255
y_valid, y_train = y_train[:4000], y_train[4000:]
X_test = X_test / 255
X_train[0].shape
plt.imshow(X_train[0])
plt.figure(figsize = (15, 4))
plotnumber = 1

for i in range(2):
    if plotnumber <= 2:
        ax = plt.subplot(1, 2, plotnumber)
        plt.imshow(X_train[i])
        plt.axis('off')

    plotnumber += 1

plt.tight_layout()
plt.show()
class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat",
               "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]
class_names[y_train[0]], class_names[y_train[1]]
plt.figure(figsize = (15, 6))
plotnumber = 1

plt.figure(figsize = (15, 6))
plotnumber = 1

for i in range(51):
    if plotnumber <= 50:
        ax = plt.subplot(5, 10, plotnumber)
        plt.imshow(X_train[i], cmap = 'binary')
        plt.axis('off')
        plt.title(class_names[y_train[i]], fontdict = {'fontsize'  : 12, 'color' : 'black'})

    plotnumber += 1

plt.tight_layout()
plt.show()
model = keras.models.Sequential([
    keras.layers.Flatten(input_shape = [28, 28]),
    keras.layers.Dense(100, activation = 'relu'),
    keras.layers.Dense(70, activation = 'relu'),
    keras.layers.Dense(50, activation = 'relu'),
    keras.layers.Dense(20, activation = 'relu'),
    keras.layers.Dense(10, activation = 'softmax')
])
model.summary()
model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(),    #loss function is cross entropy
  optimizer = tf.keras.optimizers.Adam(), metrics = ['accuracy'])
model_history = model.fit(X_train, y_train, validation_data = (X_valid, y_valid), epochs = 50)
model.evaluate(X_test,y_test)
y_probs = model.predict(X_test)
y_probs[100]
y_preds = y_probs.argmax(axis = 1)

y_preds[100]
